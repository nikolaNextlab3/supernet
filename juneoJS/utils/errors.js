"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainAssetIdError = exports.SubnetAddressError = exports.SubnetThresholdError = exports.SubnetIdError = exports.ProtocolError = exports.InvalidEntropy = exports.EVMFeeError = exports.Bech32Error = exports.UnknownTypeError = exports.TypeNameError = exports.TypeIdError = exports.HexError = exports.NodeIdError = exports.PrivateKeyError = exports.Base58Error = exports.MergeRuleError = exports.PublicKeyError = exports.AddressIndexError = exports.BufferSizeError = exports.SubnetOwnerError = exports.DelegationFeeError = exports.TimeError = exports.StakeError = exports.FeeAssetError = exports.EVMOutputError = exports.EVMInputError = exports.SECPMintOutputError = exports.ThresholdError = exports.InsufficientFundsError = exports.UTXOError = exports.OutputIdError = exports.ChecksumError = exports.InvalidOperationIdError = exports.OperationError = exports.InputIdError = exports.TransferableInputError = exports.TransferableOutputError = exports.CredIdError = exports.CodecIdError = exports.TransactionError = exports.NameError = exports.SymbolError = exports.NoAtomicUTXOsError = exports.ChainIdError = exports.GooseEggCheckError = exports.AddressError = exports.JuneoError = void 0;
const ADDRESS_ERROR_CODE = "1000";
const GOOSE_EGG_CHECK_ERROR_CODE = "1001";
const CHAIN_ID_ERROR_CODE = "1002";
const NO_ATOMIX_UTXOS_ERROR_CODE = "1003";
const SYMBOL_ERROR_CODE = "1004";
const NAME_ERROR_CODE = "1005";
const TRANSACTION_ERROR_CODE = "1006";
const CODEC_ID_ERROR_CODE = "1007";
const CRED_ID_ERROR_CODE = "1008";
const TRANSFERABLE_OUTPUT_ERROR_CODE = "1009";
const TRANSFERABLE_INPUT_ERROR_CODE = "1010";
const INPUT_ID_ERROR_CODE = "1011";
const OPERATION_ERROR_CODE = "1012";
const INVALID_OPERATION_ID_CODE = "1013";
const CHECKSUM_ERROR_CODE = "1014";
const OUTPUT_ID_ERROR_CODE = "1015";
const UTXO_ERROR_CODE = "1016";
const INSUFFICIENT_FUNDS_ERROR_CODE = "1017";
const THRESHOLD_ERROR_CODE = "1018";
const SECP_MINT_OUTPUT_ERROR_CODE = "1019";
const EVM_INPUT_ERROR_CODE = "1020";
const EVM_OUTPUT_ERROR_CODE = "1021";
const FEE_ASSET_ERROR_CODE = "1022";
const STAKE_ERROR_CODE = "1023";
const TIME_ERROR_CODE = "1024";
const DELEGATION_FEE_ERROR_CODE = "1025";
const SUBNET_OWNER_ERROR_CODE = "1026";
const BUFFER_SIZE_ERROR_CODE = "1027";
const ADDRESS_INDEX_ERROR_CODE = "1028";
const PUBLIC_KEY_ERROR_CODE = "1029";
const MERGE_RULE_ERROR_CODE = "1030";
const BASE58_ERROR_CODE = "1031";
const PRIVATE_KEY_ERROR_CODE = "1032";
const NODE_ID_ERROR_CODE = "1033";
const HEX_ERROR_CODE = "1034";
const TYPE_ID_ERROR_CODE = "1035";
const UNKNOWN_TYPE_ERROR_CODE = "1036";
const BECH32_ERROR_CODE = "1037";
const EVM_FEE_ERROR_CODE = "1038";
const INVALID_ENTROPY = "1039";
const PROTOCOL_ERROR_CODE = "1040";
const SUBNET_ID_ERROR_CODE = "1041";
const TYPE_NAME_ERROR_CODE = "1042";
const SUBNET_THRESHOLD_ERROR_CODE = "1043";
const SUBNET_ADDRESS_ERROR_CODE = "1044";
const CHAIN_ASSET_ID_ERROR_CODE = "1045";
class JuneoError extends Error {
    constructor(m, code) {
        super(m);
        Object.setPrototypeOf(this, JuneoError.prototype);
        this.errorCode = code;
    }
    getCode() {
        return this.errorCode;
    }
}
exports.JuneoError = JuneoError;
class AddressError extends JuneoError {
    constructor(m) {
        super(m, ADDRESS_ERROR_CODE);
        Object.setPrototypeOf(this, AddressError.prototype);
    }
}
exports.AddressError = AddressError;
class GooseEggCheckError extends JuneoError {
    constructor(m) {
        super(m, GOOSE_EGG_CHECK_ERROR_CODE);
        Object.setPrototypeOf(this, GooseEggCheckError.prototype);
    }
}
exports.GooseEggCheckError = GooseEggCheckError;
class ChainIdError extends JuneoError {
    constructor(m) {
        super(m, CHAIN_ID_ERROR_CODE);
        Object.setPrototypeOf(this, ChainIdError.prototype);
    }
}
exports.ChainIdError = ChainIdError;
class NoAtomicUTXOsError extends JuneoError {
    constructor(m) {
        super(m, NO_ATOMIX_UTXOS_ERROR_CODE);
        Object.setPrototypeOf(this, NoAtomicUTXOsError.prototype);
    }
}
exports.NoAtomicUTXOsError = NoAtomicUTXOsError;
class SymbolError extends JuneoError {
    constructor(m) {
        super(m, SYMBOL_ERROR_CODE);
        Object.setPrototypeOf(this, SymbolError.prototype);
    }
}
exports.SymbolError = SymbolError;
class NameError extends JuneoError {
    constructor(m) {
        super(m, NAME_ERROR_CODE);
        Object.setPrototypeOf(this, NameError.prototype);
    }
}
exports.NameError = NameError;
class TransactionError extends JuneoError {
    constructor(m) {
        super(m, TRANSACTION_ERROR_CODE);
        Object.setPrototypeOf(this, TransactionError.prototype);
    }
}
exports.TransactionError = TransactionError;
class CodecIdError extends JuneoError {
    constructor(m) {
        super(m, CODEC_ID_ERROR_CODE);
        Object.setPrototypeOf(this, CodecIdError.prototype);
    }
}
exports.CodecIdError = CodecIdError;
class CredIdError extends JuneoError {
    constructor(m) {
        super(m, CRED_ID_ERROR_CODE);
        Object.setPrototypeOf(this, CredIdError.prototype);
    }
}
exports.CredIdError = CredIdError;
class TransferableOutputError extends JuneoError {
    constructor(m) {
        super(m, TRANSFERABLE_OUTPUT_ERROR_CODE);
        Object.setPrototypeOf(this, TransferableOutputError.prototype);
    }
}
exports.TransferableOutputError = TransferableOutputError;
class TransferableInputError extends JuneoError {
    constructor(m) {
        super(m, TRANSFERABLE_INPUT_ERROR_CODE);
        Object.setPrototypeOf(this, TransferableInputError.prototype);
    }
}
exports.TransferableInputError = TransferableInputError;
class InputIdError extends JuneoError {
    constructor(m) {
        super(m, INPUT_ID_ERROR_CODE);
        Object.setPrototypeOf(this, InputIdError.prototype);
    }
}
exports.InputIdError = InputIdError;
class OperationError extends JuneoError {
    constructor(m) {
        super(m, OPERATION_ERROR_CODE);
        Object.setPrototypeOf(this, OperationError.prototype);
    }
}
exports.OperationError = OperationError;
class InvalidOperationIdError extends JuneoError {
    constructor(m) {
        super(m, INVALID_OPERATION_ID_CODE);
        Object.setPrototypeOf(this, InvalidOperationIdError.prototype);
    }
}
exports.InvalidOperationIdError = InvalidOperationIdError;
class ChecksumError extends JuneoError {
    constructor(m) {
        super(m, CHECKSUM_ERROR_CODE);
        Object.setPrototypeOf(this, ChecksumError.prototype);
    }
}
exports.ChecksumError = ChecksumError;
class OutputIdError extends JuneoError {
    constructor(m) {
        super(m, OUTPUT_ID_ERROR_CODE);
        Object.setPrototypeOf(this, OutputIdError.prototype);
    }
}
exports.OutputIdError = OutputIdError;
class UTXOError extends JuneoError {
    constructor(m) {
        super(m, UTXO_ERROR_CODE);
        Object.setPrototypeOf(this, UTXOError.prototype);
    }
}
exports.UTXOError = UTXOError;
class InsufficientFundsError extends JuneoError {
    constructor(m) {
        super(m, INSUFFICIENT_FUNDS_ERROR_CODE);
        Object.setPrototypeOf(this, InsufficientFundsError.prototype);
    }
}
exports.InsufficientFundsError = InsufficientFundsError;
class ThresholdError extends JuneoError {
    constructor(m) {
        super(m, THRESHOLD_ERROR_CODE);
        Object.setPrototypeOf(this, ThresholdError.prototype);
    }
}
exports.ThresholdError = ThresholdError;
class SECPMintOutputError extends JuneoError {
    constructor(m) {
        super(m, SECP_MINT_OUTPUT_ERROR_CODE);
        Object.setPrototypeOf(this, SECPMintOutputError.prototype);
    }
}
exports.SECPMintOutputError = SECPMintOutputError;
class EVMInputError extends JuneoError {
    constructor(m) {
        super(m, EVM_INPUT_ERROR_CODE);
        Object.setPrototypeOf(this, EVMInputError.prototype);
    }
}
exports.EVMInputError = EVMInputError;
class EVMOutputError extends JuneoError {
    constructor(m) {
        super(m, EVM_OUTPUT_ERROR_CODE);
        Object.setPrototypeOf(this, EVMOutputError.prototype);
    }
}
exports.EVMOutputError = EVMOutputError;
class FeeAssetError extends JuneoError {
    constructor(m) {
        super(m, FEE_ASSET_ERROR_CODE);
        Object.setPrototypeOf(this, FeeAssetError.prototype);
    }
}
exports.FeeAssetError = FeeAssetError;
class StakeError extends JuneoError {
    constructor(m) {
        super(m, STAKE_ERROR_CODE);
        Object.setPrototypeOf(this, StakeError.prototype);
    }
}
exports.StakeError = StakeError;
class TimeError extends JuneoError {
    constructor(m) {
        super(m, TIME_ERROR_CODE);
        Object.setPrototypeOf(this, TimeError.prototype);
    }
}
exports.TimeError = TimeError;
class DelegationFeeError extends JuneoError {
    constructor(m) {
        super(m, DELEGATION_FEE_ERROR_CODE);
        Object.setPrototypeOf(this, DelegationFeeError.prototype);
    }
}
exports.DelegationFeeError = DelegationFeeError;
class SubnetOwnerError extends JuneoError {
    constructor(m) {
        super(m, SUBNET_OWNER_ERROR_CODE);
        Object.setPrototypeOf(this, SubnetOwnerError.prototype);
    }
}
exports.SubnetOwnerError = SubnetOwnerError;
class BufferSizeError extends JuneoError {
    constructor(m) {
        super(m, BUFFER_SIZE_ERROR_CODE);
        Object.setPrototypeOf(this, BufferSizeError.prototype);
    }
}
exports.BufferSizeError = BufferSizeError;
class AddressIndexError extends JuneoError {
    constructor(m) {
        super(m, ADDRESS_INDEX_ERROR_CODE);
        Object.setPrototypeOf(this, AddressIndexError.prototype);
    }
}
exports.AddressIndexError = AddressIndexError;
class PublicKeyError extends JuneoError {
    constructor(m) {
        super(m, PUBLIC_KEY_ERROR_CODE);
        Object.setPrototypeOf(this, PublicKeyError.prototype);
    }
}
exports.PublicKeyError = PublicKeyError;
class MergeRuleError extends JuneoError {
    constructor(m) {
        super(m, MERGE_RULE_ERROR_CODE);
        Object.setPrototypeOf(this, MergeRuleError.prototype);
    }
}
exports.MergeRuleError = MergeRuleError;
class Base58Error extends JuneoError {
    constructor(m) {
        super(m, BASE58_ERROR_CODE);
        Object.setPrototypeOf(this, Base58Error.prototype);
    }
}
exports.Base58Error = Base58Error;
class PrivateKeyError extends JuneoError {
    constructor(m) {
        super(m, PRIVATE_KEY_ERROR_CODE);
        Object.setPrototypeOf(this, PrivateKeyError.prototype);
    }
}
exports.PrivateKeyError = PrivateKeyError;
class NodeIdError extends JuneoError {
    constructor(m) {
        super(m, NODE_ID_ERROR_CODE);
        Object.setPrototypeOf(this, NodeIdError.prototype);
    }
}
exports.NodeIdError = NodeIdError;
class HexError extends JuneoError {
    constructor(m) {
        super(m, HEX_ERROR_CODE);
        Object.setPrototypeOf(this, HexError.prototype);
    }
}
exports.HexError = HexError;
class TypeIdError extends JuneoError {
    constructor(m) {
        super(m, TYPE_ID_ERROR_CODE);
        Object.setPrototypeOf(this, TypeIdError.prototype);
    }
}
exports.TypeIdError = TypeIdError;
class TypeNameError extends JuneoError {
    constructor(m) {
        super(m, TYPE_NAME_ERROR_CODE);
        Object.setPrototypeOf(this, TypeNameError.prototype);
    }
}
exports.TypeNameError = TypeNameError;
class UnknownTypeError extends JuneoError {
    constructor(m) {
        super(m, UNKNOWN_TYPE_ERROR_CODE);
        Object.setPrototypeOf(this, UnknownTypeError.prototype);
    }
}
exports.UnknownTypeError = UnknownTypeError;
class Bech32Error extends JuneoError {
    constructor(m) {
        super(m, BECH32_ERROR_CODE);
        Object.setPrototypeOf(this, Bech32Error.prototype);
    }
}
exports.Bech32Error = Bech32Error;
class EVMFeeError extends JuneoError {
    constructor(m) {
        super(m, EVM_FEE_ERROR_CODE);
        Object.setPrototypeOf(this, EVMFeeError.prototype);
    }
}
exports.EVMFeeError = EVMFeeError;
class InvalidEntropy extends JuneoError {
    constructor(m) {
        super(m, INVALID_ENTROPY);
        Object.setPrototypeOf(this, InvalidEntropy.prototype);
    }
}
exports.InvalidEntropy = InvalidEntropy;
class ProtocolError extends JuneoError {
    constructor(m) {
        super(m, PROTOCOL_ERROR_CODE);
        Object.setPrototypeOf(this, ProtocolError.prototype);
    }
}
exports.ProtocolError = ProtocolError;
class SubnetIdError extends JuneoError {
    constructor(m) {
        super(m, SUBNET_ID_ERROR_CODE);
        Object.setPrototypeOf(this, SubnetIdError.prototype);
    }
}
exports.SubnetIdError = SubnetIdError;
class SubnetThresholdError extends JuneoError {
    constructor(m) {
        super(m, SUBNET_THRESHOLD_ERROR_CODE);
        Object.setPrototypeOf(this, SubnetThresholdError.prototype);
    }
}
exports.SubnetThresholdError = SubnetThresholdError;
class SubnetAddressError extends JuneoError {
    constructor(m) {
        super(m, SUBNET_ADDRESS_ERROR_CODE);
        Object.setPrototypeOf(this, SubnetAddressError.prototype);
    }
}
exports.SubnetAddressError = SubnetAddressError;
class ChainAssetIdError extends JuneoError {
    constructor(m) {
        super(m, CHAIN_ASSET_ID_ERROR_CODE);
        Object.setPrototypeOf(this, ChainAssetIdError.prototype);
    }
}
exports.ChainAssetIdError = ChainAssetIdError;
//# sourceMappingURL=data:application/json;base64,