"use strict";
/**
 * @packageDocumentation
 * @module Utils-Constants
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Defaults = exports.JUNESTAKECAP = exports.JUNEGWEI = exports.GWEI = exports.WEI = exports.NANOJUNE = exports.MICROJUNE = exports.MILLIJUNE = exports.CENTIJUNE = exports.DECIJUNE = exports.ONEJUNE = exports.mnemonic = exports.DefaultEVMLocalGenesisAddress = exports.DefaultEVMLocalGenesisPrivateKey = exports.DefaultLocalGenesisPrivateKey = exports.PChainVMName = exports.CChainVMName = exports.XChainVMName = exports.PChainAlias = exports.XChainAlias = exports.PrimaryNetworkID = exports.PlatformChainID = exports.DefaultNetworkID = exports.FallbackEVMChainID = exports.FallbackNetworkName = exports.FallbackHRP = exports.NetworkNameToNetworkID = exports.NetworkIDToNetworkNames = exports.HRPToNetworkID = exports.NetworkIDToHRP = exports.MainnetAPI = exports.BelgradeAPI = exports.PrimaryAssetAlias = exports.NodeIDPrefix = exports.PrivateKeyPrefix = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
exports.PrivateKeyPrefix = "PrivateKey-";
exports.NodeIDPrefix = "NodeID-";
exports.PrimaryAssetAlias = "JUNE";
exports.BelgradeAPI = "api2.mcnpoc3.xyz";
exports.MainnetAPI = exports.BelgradeAPI;
exports.NetworkIDToHRP = {
    1: "june",
    1337: "custom",
    12345: "local"
};
exports.HRPToNetworkID = {
    june: 1,
    custom: 1337,
    local: 12345
};
exports.NetworkIDToNetworkNames = {
    1: ["Belgrade"]
};
exports.NetworkNameToNetworkID = {
    Belgrade: 1,
    Custom: 1337,
    "Custom Network": 1337,
    Local: 12345,
    "Local Network": 12345
};
exports.FallbackHRP = "custom";
exports.FallbackNetworkName = "Custom Network";
exports.FallbackEVMChainID = 43112;
exports.DefaultNetworkID = 1;
exports.PlatformChainID = "11111111111111111111111111111111LpoYY";
exports.PrimaryNetworkID = "11111111111111111111111111111111LpoYY";
exports.XChainAlias = "X";
exports.PChainAlias = "P";
exports.XChainVMName = "jvm";
exports.CChainVMName = "evm";
exports.PChainVMName = "platformvm";
// DO NOT use the following private keys and/or mnemonic on Fuji or Testnet
// This address/account is for testing on the local avash network
exports.DefaultLocalGenesisPrivateKey = "ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN";
exports.DefaultEVMLocalGenesisPrivateKey = "0x56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027";
exports.DefaultEVMLocalGenesisAddress = "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC";
exports.mnemonic = "output tooth keep tooth bracket fox city sustain blood raise install pond stem reject long scene clap gloom purpose mean music piece unknown light";
exports.ONEJUNE = new bn_js_1.default(1000000000);
exports.DECIJUNE = exports.ONEJUNE.div(new bn_js_1.default(10));
exports.CENTIJUNE = exports.ONEJUNE.div(new bn_js_1.default(100));
exports.MILLIJUNE = exports.ONEJUNE.div(new bn_js_1.default(1000));
exports.MICROJUNE = exports.ONEJUNE.div(new bn_js_1.default(1000000));
exports.NANOJUNE = exports.ONEJUNE.div(new bn_js_1.default(1000000000));
exports.WEI = new bn_js_1.default(1);
exports.GWEI = exports.WEI.mul(new bn_js_1.default(1000000000));
exports.JUNEGWEI = exports.NANOJUNE.clone();
exports.JUNESTAKECAP = exports.ONEJUNE.mul(new bn_js_1.default(45000));
// Start Belgrade
let juneAssetID = "dcND1oFSYQBKvLhsfJgFnLPnKuWntXY34GQdYRffThZbfZ7JD";
const n1X = {
    blockchainID: "2w46yCmx8jsnGWVfuhqA4m8WE7huhVbuvAemAeZUz4HSqynfaD",
    juneAssetID: juneAssetID,
    alias: exports.XChainAlias,
    vm: exports.XChainVMName,
    txFee: exports.MILLIJUNE,
    creationTxFee: exports.CENTIJUNE,
    mintTxFee: exports.MILLIJUNE
};
const n1P = {
    blockchainID: exports.PlatformChainID,
    juneAssetID: juneAssetID,
    alias: exports.PChainAlias,
    vm: exports.PChainVMName,
    txFee: exports.MILLIJUNE,
    createSubnetTx: exports.ONEJUNE,
    createChainTx: exports.ONEJUNE,
    creationTxFee: exports.CENTIJUNE,
    minConsumption: 0.1,
    maxConsumption: 0.12,
    maxStakingDuration: new bn_js_1.default(31536000),
    maxSupply: new bn_js_1.default(720000000).mul(exports.ONEJUNE),
    minStake: exports.ONEJUNE.mul(new bn_js_1.default(100)),
    minStakeDuration: 2 * 7 * 24 * 60 * 60,
    maxStakeDuration: 365 * 24 * 60 * 60,
    minDelegationStake: exports.MILLIJUNE.mul(new bn_js_1.default(10)),
    minDelegationFee: new bn_js_1.default(12)
};
const n1EVM = {
    // backward capability
    blockchainID: "",
    vm: exports.CChainVMName,
    txBytesGas: 1,
    costPerSignature: 1000,
    // DEPRECATED - txFee
    // WILL BE REMOVED IN NEXT MAJOR VERSION BUMP
    txFee: exports.MILLIJUNE,
    // DEPRECATED - gasPrice
    // WILL BE REMOVED IN NEXT MAJOR VERSION BUMP
    gasPrice: exports.GWEI.mul(new bn_js_1.default(225)),
    minGasPrice: exports.GWEI.mul(new bn_js_1.default(25)),
    maxGasPrice: exports.GWEI.mul(new bn_js_1.default(1000))
};
// End Belgrade
// Start Local
let juneAssetIDLocal = "2kyQ9PsucjW39j7Xp9Eas5G9jjEVvoviapY7HCfPwg5bC5rE4L";
const n1XLocal = {
    blockchainID: "2WTNThwzyKFTLtEZbRGmH5nao6KY3BrhsmPT4wkTBhEC27YEL",
    juneAssetID: juneAssetIDLocal,
    alias: exports.XChainAlias,
    vm: exports.XChainVMName,
    txFee: exports.MILLIJUNE,
    creationTxFee: exports.CENTIJUNE,
    mintTxFee: exports.MILLIJUNE
};
const n1PLocal = {
    blockchainID: exports.PlatformChainID,
    juneAssetID: juneAssetIDLocal,
    alias: exports.PChainAlias,
    vm: exports.PChainVMName,
    txFee: exports.MILLIJUNE,
    createSubnetTx: exports.ONEJUNE,
    createChainTx: exports.ONEJUNE,
    creationTxFee: exports.CENTIJUNE,
    minConsumption: 0.1,
    maxConsumption: 0.12,
    maxStakingDuration: new bn_js_1.default(31536000),
    maxSupply: new bn_js_1.default(720000000).mul(exports.ONEJUNE),
    minStake: exports.ONEJUNE.mul(new bn_js_1.default(2000)),
    minStakeDuration: 2 * 7 * 24 * 60 * 60,
    maxStakeDuration: 365 * 24 * 60 * 60,
    minDelegationStake: exports.ONEJUNE.mul(new bn_js_1.default(25)),
    minDelegationFee: new bn_js_1.default(2)
};
const n1EVMLocal = {
    // backward capability
    blockchainID: "",
    vm: exports.CChainVMName,
    txBytesGas: 1,
    costPerSignature: 1000,
    // DEPRECATED - txFee
    // WILL BE REMOVED IN NEXT MAJOR VERSION BUMP
    txFee: exports.MILLIJUNE,
    // DEPRECATED - gasPrice
    // WILL BE REMOVED IN NEXT MAJOR VERSION BUMP
    gasPrice: exports.GWEI.mul(new bn_js_1.default(225)),
    minGasPrice: exports.GWEI.mul(new bn_js_1.default(25)),
    maxGasPrice: exports.GWEI.mul(new bn_js_1.default(1000))
};
// End Local
class Defaults {
}
exports.Defaults = Defaults;
Defaults.network = {
    1: {
        hrp: exports.NetworkIDToHRP[1],
        X: n1X,
        "2w46yCmx8jsnGWVfuhqA4m8WE7huhVbuvAemAeZUz4HSqynfaD": n1X,
        P: n1P,
        "11111111111111111111111111111111LpoYY": n1P,
        EVM: n1EVM
    }
    // 1: {
    //   hrp: NetworkIDToHRP[1],
    //   X: n1XLocal,
    //   "26FESnTy9uNkqb8ZVr9RETCmPGwLQadVPT54RdLC5NqLsxJTuD": n1XLocal,
    //   P: n1PLocal,
    //   "11111111111111111111111111111111LpoYY": n1PLocal,
    //   EVM: n1EVMLocal
    // }
};
//# sourceMappingURL=data:application/json;base64,